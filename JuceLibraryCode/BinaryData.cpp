/* ==================================== JUCER_BINARY_RESOURCE ====================================

   This is an auto-generated file: Any edits you make may be overwritten!

*/

#include <cstring>

namespace BinaryData
{

//================== basic.frag.spv ==================
static const unsigned char temp_binary_data_0[] =
{ 3,2,35,7,0,0,1,0,11,0,13,0,13,0,0,0,0,0,0,0,17,0,2,0,1,0,0,0,11,0,6,0,1,0,0,0,71,76,83,76,46,115,116,100,46,52,53,48,0,0,0,0,14,0,3,0,0,0,0,0,1,0,0,0,15,0,7,0,4,0,0,0,4,0,0,0,109,97,105,110,0,0,0,0,9,0,0,0,11,0,0,0,16,0,3,0,4,0,0,0,7,0,0,0,3,0,3,0,2,
0,0,0,194,1,0,0,4,0,10,0,71,76,95,71,79,79,71,76,69,95,99,112,112,95,115,116,121,108,101,95,108,105,110,101,95,100,105,114,101,99,116,105,118,101,0,0,4,0,8,0,71,76,95,71,79,79,71,76,69,95,105,110,99,108,117,100,101,95,100,105,114,101,99,116,105,118,101,
0,5,0,4,0,4,0,0,0,109,97,105,110,0,0,0,0,5,0,5,0,9,0,0,0,111,117,116,67,111,108,111,114,0,0,0,0,5,0,5,0,11,0,0,0,102,114,97,103,67,111,108,111,114,0,0,0,71,0,4,0,9,0,0,0,30,0,0,0,0,0,0,0,71,0,4,0,11,0,0,0,30,0,0,0,0,0,0,0,19,0,2,0,2,0,0,0,33,0,3,0,3,
0,0,0,2,0,0,0,22,0,3,0,6,0,0,0,32,0,0,0,23,0,4,0,7,0,0,0,6,0,0,0,4,0,0,0,32,0,4,0,8,0,0,0,3,0,0,0,7,0,0,0,59,0,4,0,8,0,0,0,9,0,0,0,3,0,0,0,32,0,4,0,10,0,0,0,1,0,0,0,7,0,0,0,59,0,4,0,10,0,0,0,11,0,0,0,1,0,0,0,54,0,5,0,2,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,248,
0,2,0,5,0,0,0,61,0,4,0,7,0,0,0,12,0,0,0,11,0,0,0,62,0,3,0,9,0,0,0,12,0,0,0,253,0,1,0,56,0,1,0,0,0 };

const char* basic_frag_spv = (const char*) temp_binary_data_0;

//================== basic.vert.spv ==================
static const unsigned char temp_binary_data_1[] =
{ 3,2,35,7,0,0,1,0,11,0,13,0,31,0,0,0,0,0,0,0,17,0,2,0,1,0,0,0,11,0,6,0,1,0,0,0,71,76,83,76,46,115,116,100,46,52,53,48,0,0,0,0,14,0,3,0,0,0,0,0,1,0,0,0,15,0,9,0,0,0,0,0,4,0,0,0,109,97,105,110,0,0,0,0,13,0,0,0,18,0,0,0,27,0,0,0,29,0,0,0,3,0,3,0,2,0,0,0,
194,1,0,0,4,0,10,0,71,76,95,71,79,79,71,76,69,95,99,112,112,95,115,116,121,108,101,95,108,105,110,101,95,100,105,114,101,99,116,105,118,101,0,0,4,0,8,0,71,76,95,71,79,79,71,76,69,95,105,110,99,108,117,100,101,95,100,105,114,101,99,116,105,118,101,0,5,
0,4,0,4,0,0,0,109,97,105,110,0,0,0,0,5,0,6,0,11,0,0,0,103,108,95,80,101,114,86,101,114,116,101,120,0,0,0,0,6,0,6,0,11,0,0,0,0,0,0,0,103,108,95,80,111,115,105,116,105,111,110,0,6,0,7,0,11,0,0,0,1,0,0,0,103,108,95,80,111,105,110,116,83,105,122,101,0,0,
0,0,6,0,7,0,11,0,0,0,2,0,0,0,103,108,95,67,108,105,112,68,105,115,116,97,110,99,101,0,6,0,7,0,11,0,0,0,3,0,0,0,103,108,95,67,117,108,108,68,105,115,116,97,110,99,101,0,5,0,3,0,13,0,0,0,0,0,0,0,5,0,5,0,18,0,0,0,105,110,80,111,115,105,116,105,111,110,0,
0,5,0,5,0,27,0,0,0,102,114,97,103,67,111,108,111,114,0,0,0,5,0,4,0,29,0,0,0,105,110,67,111,108,111,114,0,72,0,5,0,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,72,0,5,0,11,0,0,0,1,0,0,0,11,0,0,0,1,0,0,0,72,0,5,0,11,0,0,0,2,0,0,0,11,0,0,0,3,0,0,0,72,0,5,0,11,0,0,
0,3,0,0,0,11,0,0,0,4,0,0,0,71,0,3,0,11,0,0,0,2,0,0,0,71,0,4,0,18,0,0,0,30,0,0,0,0,0,0,0,71,0,4,0,27,0,0,0,30,0,0,0,0,0,0,0,71,0,4,0,29,0,0,0,30,0,0,0,1,0,0,0,19,0,2,0,2,0,0,0,33,0,3,0,3,0,0,0,2,0,0,0,22,0,3,0,6,0,0,0,32,0,0,0,23,0,4,0,7,0,0,0,6,0,0,0,
4,0,0,0,21,0,4,0,8,0,0,0,32,0,0,0,0,0,0,0,43,0,4,0,8,0,0,0,9,0,0,0,1,0,0,0,28,0,4,0,10,0,0,0,6,0,0,0,9,0,0,0,30,0,6,0,11,0,0,0,7,0,0,0,6,0,0,0,10,0,0,0,10,0,0,0,32,0,4,0,12,0,0,0,3,0,0,0,11,0,0,0,59,0,4,0,12,0,0,0,13,0,0,0,3,0,0,0,21,0,4,0,14,0,0,0,32,
0,0,0,1,0,0,0,43,0,4,0,14,0,0,0,15,0,0,0,0,0,0,0,23,0,4,0,16,0,0,0,6,0,0,0,3,0,0,0,32,0,4,0,17,0,0,0,1,0,0,0,16,0,0,0,59,0,4,0,17,0,0,0,18,0,0,0,1,0,0,0,43,0,4,0,6,0,0,0,20,0,0,0,0,0,128,63,32,0,4,0,25,0,0,0,3,0,0,0,7,0,0,0,59,0,4,0,25,0,0,0,27,0,0,0,
3,0,0,0,32,0,4,0,28,0,0,0,1,0,0,0,7,0,0,0,59,0,4,0,28,0,0,0,29,0,0,0,1,0,0,0,54,0,5,0,2,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,248,0,2,0,5,0,0,0,61,0,4,0,16,0,0,0,19,0,0,0,18,0,0,0,81,0,5,0,6,0,0,0,21,0,0,0,19,0,0,0,0,0,0,0,81,0,5,0,6,0,0,0,22,0,0,0,19,0,0,0,
1,0,0,0,81,0,5,0,6,0,0,0,23,0,0,0,19,0,0,0,2,0,0,0,80,0,7,0,7,0,0,0,24,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,20,0,0,0,65,0,5,0,25,0,0,0,26,0,0,0,13,0,0,0,15,0,0,0,62,0,3,0,26,0,0,0,24,0,0,0,61,0,4,0,7,0,0,0,30,0,0,0,29,0,0,0,62,0,3,0,27,0,0,0,30,0,0,0,253,
0,1,0,56,0,1,0,0,0 };

const char* basic_vert_spv = (const char*) temp_binary_data_1;

//================== basic.frag ==================
static const unsigned char temp_binary_data_2[] =
"#version 450\r\n"
"\r\n"
"layout(location = 0) in vec4 fragColor;  // Input color from vertex shader\r\n"
"layout(location = 0) out vec4 outColor;  // Output color\r\n"
"\r\n"
"void main() {\r\n"
"    outColor = fragColor;\r\n"
"}\r\n";

const char* basic_frag = (const char*) temp_binary_data_2;

//================== basic.vert ==================
static const unsigned char temp_binary_data_3[] =
"#version 450\r\n"
"\r\n"
"layout(location = 0) in vec3 inPosition; // Vertex position\r\n"
"layout(location = 1) in vec4 inColor;    // Vertex color\r\n"
"\r\n"
"layout(location = 0) out vec4 fragColor; // Outputted color for the fragment shader\r\n"
"\r\n"
"void main() {\r\n"
"    gl_Position = vec4(inPosition, 1.0);\r\n"
"    fragColor = inColor;\r\n"
"}\r\n";

const char* basic_vert = (const char*) temp_binary_data_3;

//================== invert.frag.spv ==================
static const unsigned char temp_binary_data_4[] =
{ 3,2,35,7,0,0,1,0,11,0,13,0,27,0,0,0,0,0,0,0,17,0,2,0,1,0,0,0,11,0,6,0,1,0,0,0,71,76,83,76,46,115,116,100,46,52,53,48,0,0,0,0,14,0,3,0,0,0,0,0,1,0,0,0,15,0,7,0,4,0,0,0,4,0,0,0,109,97,105,110,0,0,0,0,9,0,0,0,14,0,0,0,16,0,3,0,4,0,0,0,7,0,0,0,3,0,3,0,2,
0,0,0,194,1,0,0,4,0,10,0,71,76,95,71,79,79,71,76,69,95,99,112,112,95,115,116,121,108,101,95,108,105,110,101,95,100,105,114,101,99,116,105,118,101,0,0,4,0,8,0,71,76,95,71,79,79,71,76,69,95,105,110,99,108,117,100,101,95,100,105,114,101,99,116,105,118,101,
0,5,0,4,0,4,0,0,0,109,97,105,110,0,0,0,0,5,0,5,0,9,0,0,0,111,117,116,67,111,108,111,114,0,0,0,0,5,0,5,0,14,0,0,0,102,114,97,103,67,111,108,111,114,0,0,0,71,0,4,0,9,0,0,0,30,0,0,0,0,0,0,0,71,0,4,0,14,0,0,0,30,0,0,0,0,0,0,0,19,0,2,0,2,0,0,0,33,0,3,0,3,
0,0,0,2,0,0,0,22,0,3,0,6,0,0,0,32,0,0,0,23,0,4,0,7,0,0,0,6,0,0,0,4,0,0,0,32,0,4,0,8,0,0,0,3,0,0,0,7,0,0,0,59,0,4,0,8,0,0,0,9,0,0,0,3,0,0,0,23,0,4,0,10,0,0,0,6,0,0,0,3,0,0,0,43,0,4,0,6,0,0,0,11,0,0,0,0,0,128,63,44,0,6,0,10,0,0,0,12,0,0,0,11,0,0,0,11,0,
0,0,11,0,0,0,32,0,4,0,13,0,0,0,1,0,0,0,7,0,0,0,59,0,4,0,13,0,0,0,14,0,0,0,1,0,0,0,21,0,4,0,18,0,0,0,32,0,0,0,0,0,0,0,43,0,4,0,18,0,0,0,19,0,0,0,3,0,0,0,32,0,4,0,20,0,0,0,1,0,0,0,6,0,0,0,54,0,5,0,2,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,248,0,2,0,5,0,0,0,61,0,
4,0,7,0,0,0,15,0,0,0,14,0,0,0,79,0,8,0,10,0,0,0,16,0,0,0,15,0,0,0,15,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,131,0,5,0,10,0,0,0,17,0,0,0,12,0,0,0,16,0,0,0,65,0,5,0,20,0,0,0,21,0,0,0,14,0,0,0,19,0,0,0,61,0,4,0,6,0,0,0,22,0,0,0,21,0,0,0,81,0,5,0,6,0,0,0,23,0,0,0,
17,0,0,0,0,0,0,0,81,0,5,0,6,0,0,0,24,0,0,0,17,0,0,0,1,0,0,0,81,0,5,0,6,0,0,0,25,0,0,0,17,0,0,0,2,0,0,0,80,0,7,0,7,0,0,0,26,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,22,0,0,0,62,0,3,0,9,0,0,0,26,0,0,0,253,0,1,0,56,0,1,0,0,0 };

const char* invert_frag_spv = (const char*) temp_binary_data_4;


const char* getNamedResource (const char* resourceNameUTF8, int& numBytes);
const char* getNamedResource (const char* resourceNameUTF8, int& numBytes)
{
    unsigned int hash = 0;

    if (resourceNameUTF8 != nullptr)
        while (*resourceNameUTF8 != 0)
            hash = 31 * hash + (unsigned int) *resourceNameUTF8++;

    switch (hash)
    {
        case 0x788feadd:  numBytes = 452; return basic_frag_spv;
        case 0x64ab4a9c:  numBytes = 1052; return basic_vert_spv;
        case 0xbcfb6763:  numBytes = 197; return basic_frag;
        case 0xbd027ea2:  numBytes = 310; return basic_vert;
        case 0x83e73c35:  numBytes = 732; return invert_frag_spv;
        default: break;
    }

    numBytes = 0;
    return nullptr;
}

const char* namedResourceList[] =
{
    "basic_frag_spv",
    "basic_vert_spv",
    "basic_frag",
    "basic_vert",
    "invert_frag_spv"
};

const char* originalFilenames[] =
{
    "basic.frag.spv",
    "basic.vert.spv",
    "basic.frag",
    "basic.vert",
    "invert.frag.spv"
};

const char* getNamedResourceOriginalFilename (const char* resourceNameUTF8);
const char* getNamedResourceOriginalFilename (const char* resourceNameUTF8)
{
    for (unsigned int i = 0; i < (sizeof (namedResourceList) / sizeof (namedResourceList[0])); ++i)
        if (strcmp (namedResourceList[i], resourceNameUTF8) == 0)
            return originalFilenames[i];

    return nullptr;
}

}
